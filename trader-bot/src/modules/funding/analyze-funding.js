// modules/funding/analyze-funding.js
// --- –ê–Ω–∞–ª—ñ–∑ Funding Rate –Ω–∞–ø—Ä—è–º—É –∑ Binance ---
// API: /fapi/v1/fundingRate
// –õ–æ–≥—ñ–∫–∞:
//   funding > 0 ‚Üí –ø–µ—Ä–µ–≤–∞–≥–∞ LONG—ñ–≤ ‚Üí SHORT-—Å–∏–≥–Ω–∞–ª
//   funding < 0 ‚Üí –ø–µ—Ä–µ–≤–∞–≥–∞ SHORT—ñ–≤ ‚Üí LONG-—Å–∏–≥–Ω–∞–ª

import axios from 'axios';

export async function analyzeFunding(symbol = 'ETHUSDT', window = 60) {
  try {
    const url = 'https://fapi.binance.com/fapi/v1/fundingRate';
    const res = await axios.get(url, {
      params: {
        symbol,
        limit: window, // –æ–¥—Ä–∞–∑—É –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N –∑–∞–ø–∏—Å—ñ–≤
      },
    });

    if (!res.data || res.data.length === 0) {
      console.log(`‚ö†Ô∏è No funding data for ${symbol}`);
      return null;
    }

    // –∫–æ–∂–µ–Ω fundingRate = 8h ‚Üí –ø–æ–∫—Ä–∏—Ç–∏–π –ø–µ—Ä—ñ–æ–¥
    const hoursCovered = window * 8;
    const daysCovered = (hoursCovered / 24).toFixed(1);

    // –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N
    const candles = res.data.map((fr) => ({
      symbol,
      time: new Date(fr.fundingTime).toISOString(),
      fundingRate: parseFloat(fr.fundingRate),
    }));

    if (candles.length < window) {
      console.log(`‚ö†Ô∏è Not enough funding data for ${symbol}, need ${window}`);
      return null;
    }

    // —Å–µ—Ä–µ–¥–Ω—ñ–π funding rate –∑–∞ –ø–µ—Ä—ñ–æ–¥
    const avgFunding =
      candles.reduce((s, c) => s + (c.fundingRate || 0), 0) / candles.length;

    let signal = 'NEUTRAL';
    let longScore = 50;
    let shortScore = 50;

    if (avgFunding > 0) {
      signal = 'SHORT';
      shortScore = Math.min(100, 50 + avgFunding * 1000);
      longScore = 100 - shortScore;
    } else if (avgFunding < 0) {
      signal = 'LONG';
      longScore = Math.min(100, 50 + Math.abs(avgFunding) * 1000);
      shortScore = 100 - longScore;
    }

    const roundedLong = Math.round(longScore);
    const roundedShort = Math.round(shortScore);

    return {
      module: 'funding',
      symbol,
      signal,
      strength: Math.max(roundedLong, roundedShort),
      meta: {
        LONG: roundedLong,
        SHORT: roundedShort,
        candlesUsed: candles.length,
        avgFunding: parseFloat(avgFunding.toFixed(5)),
        periodCovered: `${hoursCovered}h (~${daysCovered} days)`, // üÜï –¥–æ–¥–∞—î–º–æ
      },
    };
  } catch (e) {
    console.error(`‚ùå Funding fetch/analyze error for ${symbol}:`, e.message);
    return null;
  }
}
