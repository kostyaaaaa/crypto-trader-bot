// trading/engine.js
import { loadDocs } from '../storage/storage.js';
import { calculatePositionSize } from './risk.js';
import { addPosition, getActivePositions } from './positions.js';
import { preparePosition } from './prepare.js';

export async function tradingEngine(symbol, config) {
  const lookback = 3;
  const analysisHistory = await loadDocs('analysis', symbol, lookback);
  const activePositions = await getActivePositions(symbol);
  if (activePositions.length > 0) {
    // console.log(`‚ö†Ô∏è ${symbol}: –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞, –Ω–æ–≤—É –Ω–µ —Å—Ç–≤–æ—Ä—é—é`);
    return;
  }
  // cooldown: –¥–∏–≤–∏–º–æ—Å—å –æ—Å—Ç–∞–Ω–Ω—é —É–≥–æ–¥—É –≤ history
  const history = await loadDocs('history', symbol, 50);
  if (history?.length) {
    const lastClosed = [...history].reverse().find((p) => p.symbol === symbol);
    if (lastClosed?.closedAt) {
      const minutesSince =
        (Date.now() - new Date(lastClosed.closedAt).getTime()) / 60000;
      const cooldown = config.strategy.entry.cooldownMin || 0;
      if (minutesSince < cooldown) {
        console.log(
          `‚è∏Ô∏è ${symbol}: cooldown ${cooldown}m, –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${(cooldown - minutesSince).toFixed(1)}m`,
        );
        return;
      }
    }
  }

  if (!analysisHistory || analysisHistory.length < lookback) {
    // console.log(`‚ö†Ô∏è Not enough analysis history for ${symbol}`);
    return;
  }

  // 1. –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ–∑–∏
  const lastAnalyses = analysisHistory.reverse(); // –≤—ñ–¥ —Å—Ç–∞—Ä–∏—Ö –¥–æ –Ω–æ–≤–∏—Ö
  const decisions = lastAnalyses.map((a) => a.bias);

  // 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ –±—ñ–ª—å—à—ñ—Å—Ç—å (LONG / SHORT)
  const majority = decisions
    .sort(
      (a, b) =>
        decisions.filter((v) => v === a).length -
        decisions.filter((v) => v === b).length,
    )
    .pop();

  if (majority === 'NEUTRAL') return;

  // 3. –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è —Å–∫–æ–Ω—Ñ—ñ—Ä–º—É–≤–∞–Ω–Ω—è
  const analysis = lastAnalyses[lastAnalyses.length - 1];
  const { entry, capital } = config.strategy;
  const { scores } = analysis;

  const minScore = entry.minScore[majority];
  if (scores[majority] < minScore) return;

  // 4. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É —É–≥–æ–¥–∏
  const size = calculatePositionSize({
    ...capital,
    baseSizeUsd: config.strategy.sizing.baseSizeUsd,
    maxPositionUsd: config.strategy.sizing.maxPositionUsd,
  });
  // 5. –ì–æ—Ç—É—î–º–æ –ø–æ–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é —á–µ—Ä–µ–∑ preparePosition
  const position = await preparePosition(
    symbol,
    config,
    analysis,
    majority,
    size,
  );

  await addPosition(position);
  console.log('üü¢ New position opened:', position);
}
