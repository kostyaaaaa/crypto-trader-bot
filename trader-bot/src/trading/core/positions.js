import {
  getLiveState,
  getOpenPositions,
  closePosition as binanceClosePosition,
  openMarketOrder,
  placeStopLoss,
  placeTakeProfit,
  cancelAllOrders,
  getSymbolFilters,
  adjustQuantity,
  adjustPrice,
} from '../binance/binance.js';

function oppositeSide(side) {
  return side === 'LONG' ? 'SHORT' : 'LONG';
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
 */
export async function getActivePositions(symbol = null) {
  if (symbol) {
    const { position, orders } = await getLiveState(symbol);
    return position?.side ? [{ ...position, orders }] : [];
  } else {
    const positions = await getOpenPositions();
    return positions.filter(p => Number(p.positionAmt) !== 0);
  }
}

/**
 * –ó–∞–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –ø–æ–≤–Ω—ñ—Å—Ç—é
 */
export async function closePosition(symbol, side, quantity) {
  return await binanceClosePosition(symbol, side, quantity);
}

/**
 * –ß–∞—Å—Ç–∫–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
 */
export async function partialClose(symbol, side, sizePct, price) {
  const { position } = await getLiveState(symbol);
  if (!position?.side) return null;

  const qty = (position.size * sizePct) / 100;
  return await binanceClosePosition(symbol, oppositeSide(side), qty / price);
}

/**
 * –î–æ–ª–∏–≤ –¥–æ –ø–æ–∑–∏—Ü—ñ—ó (DCA/Add)
 */
export async function applyAddToPosition(symbol, side, addUsd, price, exits) {
  const filters = await getSymbolFilters(symbol);

  // 1. –í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä
  const rawQty = addUsd / price;
  const qty = adjustQuantity(filters, rawQty);
  if (!qty || Number(qty) <= 0) {
    console.error(`‚ùå Add qty too small for ${symbol}`);
    return null;
  }

  await openMarketOrder(symbol, side === 'LONG' ? 'BUY' : 'SELL', qty);
  console.log(`‚ûï Added ${addUsd}$ to ${symbol} @ ${price}`);

  // 2. –°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä—ñ SL/TP
  await cancelAllOrders(symbol);

  // 3. –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –≤—Å—ñ—î—ó –ø–æ–∑–∏—Ü—ñ—ó
  const { position } = await getLiveState(symbol);
  const totalQty = position?.size || (Number(qty) || 0);

  // 4. –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –Ω–æ–≤—ñ SL/TP
  if (exits?.sl?.price) {
    const stopPx = adjustPrice(filters, exits.sl.price);
    await placeStopLoss(symbol, side, stopPx, totalQty);
    console.log(`üõë New SL placed @ ${stopPx}`);
  }

  if (Array.isArray(exits?.tp)) {
    for (const tp of exits.tp) {
      const tpPx = adjustPrice(filters, tp.price);
      const tpQty = adjustQuantity(filters, (totalQty * tp.sizePct) / 100);
      if (tpQty > 0) {
        await placeTakeProfit(symbol, side, tpPx, tpQty);
        console.log(`üéØ New TP @ ${tpPx} (${tp.sizePct}%)`);
      }
    }
  }

  // 5. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω
  return await getLiveState(symbol);
}