// trading/core/monitorPositions.js
import axios from 'axios';
import {
  openMarketOrder,
  cancelStopOrders,
  placeStopLoss,
  placeTakeProfit,
} from '../binance/binance.js';
import { getActivePositions } from './binance-positions-manager.js';
import {
  addToPosition,
  adjustPosition,
  getHistory,
  updateStopPrice,
} from './historyStore.js';
import { loadDocs } from '../../storage/storage.js';

const TRADE_MODE = process.env.TRADE_MODE || 'paper';

// === API Binance ===
async function getMarkPrice(symbol) {
  try {
    const res = await axios.get(
      'https://fapi.binance.com/fapi/v1/premiumIndex',
      { params: { symbol } },
    );
    return parseFloat(res.data.markPrice);
  } catch (e) {
    return null;
  }
}

// –í–∏—Ç—è–≥—É—î–º–æ OPEN-–¥–æ–∫ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó (–ë–î)
async function getOpenHistoryDoc(symbol) {
  try {
    const hist = await getHistory(symbol, 10);
    if (!Array.isArray(hist)) return null;
    const open = hist.find((h) => h.status === 'OPEN');
    return open || null;
  } catch {
    return null;
  }
}

// === –û—Å–Ω–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ ===
export async function monitorPositions({ symbol, strategy }) {
  let positions = [];
  try {
    positions = await getActivePositions(symbol);
  } catch {
    return;
  }

  if (!positions.length) return;

  const price = await getMarkPrice(symbol);
  if (price == null) return;

  // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–Ω–∞–ª—ñ–∑
  let lastAnalysis = null;
  try {
    const analysisDocs = await loadDocs('analysis', symbol, 1);
    if (Array.isArray(analysisDocs) && analysisDocs.length > 0) {
      lastAnalysis = analysisDocs[0];
    }
  } catch {}

  for (let pos of positions) {
    const { side, entryPrice, size: liveQty, orders } = pos;
    const dir = side === 'LONG' ? 1 : -1;
    const binanceSide = side === 'LONG' ? 'BUY' : 'SELL';

    const currentSL = Array.isArray(orders)
      ? (orders.find((o) => o.type === 'SL')?.price ?? null)
      : null;

    const openDoc = await getOpenHistoryDoc(symbol);
    const addsCount = openDoc?.adds?.length || 0;

    /* ===== 1) TRAILING ===== */
    const trailingCfg = strategy?.exits?.trailing;

    // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–µ–π—Ç —Ç—Ä–µ–ª—ñ–Ω–≥—É –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤—Ü—ñ –Ω–∞ –æ–±'—î–∫—Ç—ñ pos (–º–æ–∂–µ–º–æ –≤–∏–Ω–µ—Å—Ç–∏ —É –ë–î –ø—ñ–∑–Ω—ñ—à–µ)
    if (trailingCfg?.use && entryPrice) {
      try {
        let trailingState = openDoc?.trailing || null;

        const movePct = ((price - entryPrice) / entryPrice) * 100 * dir;

        if (!trailingState?.active && movePct >= trailingCfg.startAfterPct) {
          trailingState = {
            active: true,
            startAfterPct: trailingCfg.startAfterPct,
            trailStepPct: trailingCfg.trailStepPct,
            anchor: price,
          };
        }

        if (trailingState?.active) {
          if (side === 'LONG' && price > (trailingState.anchor || 0)) {
            trailingState.anchor = price;
          }
          if (side === 'SHORT' && price < (trailingState.anchor || Infinity)) {
            trailingState.anchor = price;
          }

          const newStop =
            side === 'LONG'
              ? trailingState.anchor * (1 - trailingCfg.trailStepPct / 100)
              : trailingState.anchor * (1 + trailingCfg.trailStepPct / 100);

          const needUpdate =
            (side === 'LONG' && (!currentSL || newStop > currentSL)) ||
            (side === 'SHORT' && (!currentSL || newStop < currentSL));

          if (needUpdate) {
            if (TRADE_MODE === 'live') {
              await cancelStopOrders(symbol, { onlySL: true }); // ‚ùóÔ∏èTP –Ω–µ —á—ñ–ø–∞—î–º–æ
              await placeStopLoss(symbol, side, newStop, liveQty); // qty = liveQty (–º–æ–Ω–µ—Ç–∏)
            }

            // –ª–æ–≥ —É —ñ—Å—Ç–æ—Ä—ñ—é
            await adjustPosition(symbol, {
              type: 'SL',
              price: newStop,
              size: liveQty,
            });

            await updateStopPrice(symbol, newStop, 'TRAIL', trailingState);
          }
        }
      } catch {}
    }

    /* ===== 2) DCA / Adds ===== */
    const { sizing } = strategy;
    if (sizing && sizing.maxAdds > 0) {
      const movePct = (Number(sizing.addOnAdverseMovePct) || 0) / 100;
      const adversePrice =
        side === 'LONG'
          ? entryPrice * (1 - movePct)
          : entryPrice * (1 + movePct);

      const condition =
        (side === 'LONG' && price <= adversePrice) ||
        (side === 'SHORT' && price >= adversePrice);
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª—É –∞–Ω–∞–ª—ñ–∑—É: —è–∫—â–æ —î –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–Ω–∞–ª—ñ–∑ —ñ —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –ø–æ–∑–∏—Ü—ñ—ó, –Ω–µ –¥–æ–¥–∞—î–º–æ
      if (
        lastAnalysis &&
        lastAnalysis.signal &&
        ((side === 'LONG' && lastAnalysis.signal === 'SHORT') ||
          (side === 'SHORT' && lastAnalysis.signal === 'LONG'))
      ) {
        continue;
      }

      if (condition && addsCount < sizing.maxAdds) {
        // –ë–µ—Ä–µ–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –Ω–æ—Ç—ñ–æ–Ω–∞–ª –∑ live-–¥–∞–Ω–∏—Ö: qty * entryPrice
        const notionalUsd = entryPrice * liveQty; // $-–æ–±—Å—è–≥
        const mult = Number(sizing.addMultiplier) || 1;
        const addSizeUsd = notionalUsd * mult;
        const addQty = addSizeUsd / price; // –º–æ–Ω–µ—Ç–∏

        if (!Number.isFinite(addQty) || addQty <= 0) {
          continue;
        }

        if (TRADE_MODE === 'live') {
          try {
            await openMarketOrder(symbol, binanceSide, addQty.toFixed(3));

            // üî• 1) –æ–¥—Ä–∞–∑—É –æ–Ω–æ–≤–ª—é—î–º–æ SL –Ω–∞ –ø–æ–≤–Ω–∏–π –Ω–æ–≤–∏–π –æ–±—Å—è–≥
            const newTotalQty = liveQty + addQty;
            if (currentSL) {
              await cancelStopOrders(symbol, { onlySL: true });
              await placeStopLoss(symbol, side, currentSL, newTotalQty);

              await adjustPosition(symbol, {
                type: 'SL',
                price: currentSL,
                size: newTotalQty,
              });

              await updateStopPrice(symbol, currentSL, 'ADD_RESET');
            }

            // ‚ö†Ô∏è –ó–∞–ø–∏—Å —É –Ü–°–¢–û–†–Ü–Æ (–ë–î): –ø—Ä–æ—Å—Ç–æ —Ñ—ñ–∫—Å—É—î–º–æ –¥–æ–ª–∏–≤ (—ñ—Å—Ç–æ—Ä—ñ—è –∑–Ω–∞—î —Å–≤—ñ–π —Ñ–æ—Ä–º–∞—Ç)
            await addToPosition(symbol, { qty: addQty, price });
          } catch {}
        } else {
          const newTotalQty = liveQty + addQty;

          // SL (—Å–∏–º—É–ª—è—Ü—ñ—è)
          if (currentSL) {
            await adjustPosition(symbol, {
              type: 'SL',
              price: currentSL,
              size: newTotalQty,
            });

            await updateStopPrice(symbol, currentSL, 'ADD_RESET');
          }

          await addToPosition(symbol, { qty: addQty, price });
        }
      }
    }
  }
}
