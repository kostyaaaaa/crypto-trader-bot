// trading/executeTrade.js
import {
  adjustPrice,
  adjustQuantity,
  cancelAllOrders,
  getPosition,
  getSymbolFilters,
  openMarketOrder,
  placeStopLoss,
  placeTakeProfit,
  setLeverage,
} from './binance.js';

import { updateStopPrice, updateTakeProfits } from '../core/historyStore.js';
import { preparePosition } from '../core/prepare.js';

const TRADE_MODE = process.env.TRADE_MODE || 'paper';

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–æ–ø-–ª–æ—Å–∞:
//  - –º–∞—î –±—É—Ç–∏ –ø–æ "–∑–±–∏—Ç–∫–æ–≤—ñ–π" —Å—Ç–æ—Ä–æ–Ω—ñ –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É (entryRef)
//  - —ñ (–∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ) –Ω–µ –º–∞—î –±—É—Ç–∏ –ø–æ "–ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ–π" —Å—Ç–æ—Ä–æ–Ω—ñ –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ (currentRef),
//    —â–æ–± –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
function validateStop(side, entryRef, currentRef, stopPrice) {
  if (!Number.isFinite(stopPrice) || !Number.isFinite(entryRef)) return false;

  // —É–º–æ–≤–∞ –∑–±–∏—Ç–∫–æ–≤–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
  const okVsEntry =
    side === 'LONG' ? stopPrice < entryRef : stopPrice > entryRef;
  if (!okVsEntry) return false;

  // –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∞
  if (Number.isFinite(currentRef)) {
    const okVsCurrent =
      side === 'LONG' ? stopPrice < currentRef : stopPrice > currentRef;
    if (!okVsCurrent) return false;
  }

  return true;
}

/**
 * –ù–û–†–ú–ê–õ–Ü–ó–ê–¶–Ü–Ø TP:
 *  - —Ñ—ñ–ª—å—Ç—Ä—É—î –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ
 *  - –≥–∞—Ä–∞–Ω—Ç—É—î —Å—É–º—É = 100% (–æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ–±–∏—Ä–∞—î –∑–∞–ª–∏—à–æ–∫)
 *  - —è–∫—â–æ —Å—É–º–∞ > 100 ‚Äî –º–∞—Å—à—Ç–∞–±—É—é—Ç—å—Å—è –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ
 */
function normalizeTpPlan(tps = []) {
  const plan = (tps || [])
    .map((tp) => ({
      price: Number(tp.price),
      sizePct: Number(tp.sizePct),
    }))
    .filter(
      (tp) =>
        Number.isFinite(tp.price) &&
        Number.isFinite(tp.sizePct) &&
        tp.sizePct > 0,
    );

  if (plan.length === 0) return [];

  const sum = plan.reduce((s, tp) => s + tp.sizePct, 0);

  if (sum === 100) return plan;

  if (sum < 100) {
    // –¥–æ–±–∏—Ä–∞—î–º–æ –∑–∞–ª–∏—à–æ–∫ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É
    const last = plan[plan.length - 1];
    last.sizePct += 100 - sum;
    return plan;
  }

  // sum > 100 ‚Üí –º–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ
  return plan.map((tp) => ({ ...tp, sizePct: (tp.sizePct / sum) * 100 }));
}

export async function executeTrade(symbol, cfg, analysis, side, price) {
  // 0) –õ–æ–∫–∞–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó (size/SL/TP)
  let pos = await preparePosition(symbol, cfg, analysis, side, price);
  const leverage = cfg?.strategy?.capital?.leverage || 10;

  // –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ TP-–ø–ª–∞–Ω (—á–µ—Ä–µ–∑ %)
  pos.takeProfits = normalizeTpPlan(pos.takeProfits);
  const { size, entryPrice, takeProfits, stopPrice } = pos;

  // PAPER MODE ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—É –ø–æ–∑–∏—Ü—ñ—é
  if (TRADE_MODE === 'paper') {
    console.log(
      `üü¢ [PAPER] Simulated ${side} ${symbol} @ ${entryPrice} (size=${size}$, lev=${leverage}x)`,
    );
    return pos;
  }

  // LIVE MODE
  const orderIds = { entry: null, stop: null, takes: [] };

  // 1) –ü–ª–µ—á–µ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
  try {
    await setLeverage(symbol, leverage);
    pos.leverage = leverage;
  } catch (err) {
    console.error(
      `‚ùå Failed to set leverage for ${symbol}:`,
      err?.message || err,
    );
  }

  // 2) –§—ñ–ª—å—Ç—Ä–∏ –±—ñ—Ä–∂—ñ
  let filters;
  try {
    filters = await getSymbolFilters(symbol);
  } catch (err) {
    console.error(
      `‚ùå Failed to fetch filters for ${symbol}:`,
      err?.message || err,
    );
    return null;
  }

  // –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É –±–∞–∑–æ–≤—ñ–π –≤–∞–ª—é—Ç—ñ
  const rawQty = size / entryPrice;
  const qty = adjustQuantity(filters, rawQty);
  console.log(
    `üìè Position sizing ${symbol}: size=${size}$, entry=${entryPrice}, rawQty=${rawQty}, adjustedQty=${qty}`,
  );
  if (!qty || Number(qty) <= 0) {
    console.error(
      `‚ùå Quantity too small, skip trade ${symbol} (raw=${rawQty})`,
    );
    return null;
  }

  // 3) –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏ –ø–æ —Å–∏–º–≤–æ–ª—É (–∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ ‚Äú–∑–∞–≤–∏—Å—ñ–≤‚Äù)
  try {
    await cancelAllOrders(symbol);
  } catch (err) {
    console.warn(
      `‚ö†Ô∏è Failed to cancel existing orders for ${symbol}:`,
      err?.message || err,
    );
  }

  // 4) –ú–∞—Ä–∫–µ—Ç-–≤—Ö—ñ–¥
  try {
    const entryOrder = await openMarketOrder(
      symbol,
      side === 'LONG' ? 'BUY' : 'SELL',
      qty,
    );
    orderIds.entry = entryOrder?.orderId || null;
    console.log(
      `‚úÖ [LIVE] Opened ${side} ${symbol}, qty=${qty}, orderId=${orderIds.entry}`,
    );
  } catch (err) {
    console.error(
      `‚ùå Failed to open market order for ${symbol}:`,
      err?.message || err,
    );
    return null;
  }

  // 5) Stop-loss (reduceOnly, –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ü—ñ–Ω–∏)
  let effectiveStopPrice = stopPrice;
  if (!effectiveStopPrice) {
    console.warn(
      `‚ö†Ô∏è No stopPrice calculated for ${symbol}, fallback to hard stop (-5%).`,
    );
    effectiveStopPrice =
      side === 'LONG' ? entryPrice * 0.95 : entryPrice * 1.05;
  }

  if (validateStop(side, entryPrice, entryPrice, effectiveStopPrice)) {
    try {
      const stopPx = adjustPrice(filters, effectiveStopPrice);
      const slOrder = await placeStopLoss(symbol, side, stopPx, qty);
      orderIds.stop = slOrder?.orderId || null;
      console.log(`üõë Stop-loss placed @ ${stopPx}, orderId=${orderIds.stop}`);
      try {
        await updateStopPrice(symbol, stopPx, 'OPEN');
      } catch (err) {
        console.warn(
          `‚ö†Ô∏è Failed to update stop price for ${symbol}:`,
          err?.message || err,
        );
      }
    } catch (err) {
      console.warn(`‚ö†Ô∏è Failed to place SL for ${symbol}:`, err?.message || err);
    }
  } else {
    console.log(
      `‚ÑπÔ∏è SL skipped (invalid or not provided): stopPrice=${effectiveStopPrice}`,
    );
  }

  // 6) Take-profits (reduceOnly, —Å—É–º–∞ = 100%)
  if (Array.isArray(takeProfits) && takeProfits.length) {
    try {
      // –ö–≤–∞–Ω—Ç—É—î–º–æ TP-–∫—ñ–ª—å–∫–æ—Å—Ç—ñ; –æ—Å—Ç–∞–Ω–Ω—ñ–π TP –æ—Ç—Ä–∏–º—É—î –∑–∞–ª–∏—à–æ–∫ –ø—ñ—Å–ª—è –∫–≤–∞–Ω—Ç—É–≤–∞–Ω–Ω—è
      const totalQty = Number(qty);
      let allocated = 0;
      const tpPlan = [];

      for (let i = 0; i < takeProfits.length; i++) {
        const { price: p, sizePct } = takeProfits[i];

        // TP —Ä–∞—Ö—É—î—Ç—å—Å—è –≤—ñ–¥ avgEntry, –∫—Ä–∞—â–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤—ñ–¥–∫–æ—Ä–∏–≥–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        // —Å–∏—Ä–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        const targetRaw = (totalQty * sizePct) / 100;

        // –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ TP ‚Äì –≤—ñ–¥–¥–∞–º–æ –≤–µ—Å—å –∑–∞–ª–∏—à–æ–∫, –∞–ª–µ –û–ë–û–í º–Ø–ó–ö–û–í–û –∫–≤–∞–Ω—Ç—É—î–º–æ –ø–æ stepSize
        let tpQty;
        if (i === takeProfits.length - 1) {
          const remainderRaw = Math.max(totalQty - allocated, 0);
          const q = adjustQuantity(filters, remainderRaw);
          tpQty = Number(q);
        } else {
          // –∫–≤–∞–Ω—Ç—É—î–º–æ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ
          const q = adjustQuantity(filters, targetRaw);
          tpQty = Number(q);
        }

        if (!Number.isFinite(tpQty) || tpQty <= 0) {
          console.log(`‚ÑπÔ∏è Skip TP#${i + 1}: qty=${tpQty}`);
          continue;
        }

        // –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        if (allocated + tpQty > totalQty)
          tpQty = Math.max(totalQty - allocated, 0);
        if (tpQty <= 0) continue;

        const tpPx = adjustPrice(filters, p);
        const tpOrder = await placeTakeProfit(symbol, side, tpPx, tpQty);

        allocated += tpQty;
        if (tpOrder?.orderId) orderIds.takes.push(tpOrder.orderId);

        tpPlan.push({ price: tpPx, sizePct });

        console.log(
          `üéØ TP#${i + 1} @ ${tpPx} for qty=${tpQty} (${sizePct.toFixed(2)}%), orderId=${tpOrder?.orderId}`,
        );
      }

      try {
        await updateTakeProfits(symbol, tpPlan, entryPrice, 'OPEN');
      } catch (err) {
        console.warn(
          `‚ö†Ô∏è Failed to update take profits for ${symbol}:`,
          err?.message || err,
        );
      }

      // —è–∫—â–æ —á–µ—Ä–µ–∑ –∫–≤–∞–Ω—Ç—É–≤–∞–Ω–Ω—è —Å—É–º–∞ < totalQty ‚Äî —ñ–Ω—Ñ–æ—Ä–º—É—î–º–æ (–¥—Ä—ñ–±–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è –æ–∫)
      const diff = totalQty - allocated;
      if (diff > 0) {
        console.log(`‚ÑπÔ∏è Unallocated qty due to quantization: ${diff}`);
      }
    } catch (err) {
      console.warn(
        `‚ö†Ô∏è Failed to place TP grid for ${symbol}:`,
        err?.message || err,
      );
    }
  } else {
    console.log('‚ÑπÔ∏è No TP plan provided (skip TP placement).');
  }

  // 7) –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —Ñ–∞–∫—Ç–∏—á–Ω—ñ —Ü–∏—Ñ—Ä–∏ –∑ Binance (entry avg, —Ñ–∞–∫—Ç–∏—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å)
  try {
    const live = await getPosition(symbol);
    if (live && Number(live.positionAmt) !== 0) {
      const avgEntry = Number(live.entryPrice);
      pos = {
        ...pos,
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π avgEntry –∑ Binance –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö TP/SL
        entryPrice: avgEntry,
        size: Math.abs(Number(live.positionAmt)) * avgEntry, // —Ñ–∞–∫—Ç–∏—á–Ω–∏–π $-–Ω–æ—Ç—ñ–æ–Ω–∞–ª
        orderIds,
        updates: [
          ...(pos.updates || []),
          {
            time: new Date().toISOString(),
            action: 'OPEN_CONFIRMED',
            price: avgEntry,
          },
        ],
      };
    } else {
      pos.orderIds = orderIds;
    }
  } catch (err) {
    console.warn(
      `‚ö†Ô∏è Failed to read live position for ${symbol}:`,
      err?.message || err,
    );
    pos.orderIds = orderIds;
  }

  // 7.1) –Ø–∫—â–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π avgEntry —Å—É—Ç—Ç—î–≤–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è ‚Äî –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—î–º–æ SL/TP –≤—ñ–¥–Ω–æ—Å–Ω–æ avgEntry
  try {
    const live = await getPosition(symbol);
    const avgEntry = Number(live?.entryPrice);
    const liveQty = Math.abs(Number(live?.positionAmt || 0));

    // –ü–µ—Ä–µ–≤–∏—Å—Ç–∞–≤–ª—è—î–º–æ –æ—Ä–¥–µ—Ä–∏ –ª–∏—à–µ —è–∫—â–æ —î –ø–æ–∑–∏—Ü—ñ—è —Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è > 0.05%
    const slippagePct =
      Number.isFinite(avgEntry) && Number.isFinite(entryPrice) && entryPrice > 0
        ? (Math.abs(avgEntry - entryPrice) / entryPrice) * 100
        : 0;

    if (liveQty > 0 && slippagePct > 0.05 && Array.isArray(pos.takeProfits)) {
      console.log(
        `‚ôªÔ∏è Realign SL/TP to avgEntry (slippage=${slippagePct.toFixed(3)}%)...`,
      );

      // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ SL/TP —ñ —Å—Ç–∞–≤–∏–º–æ –∑–∞–Ω–æ–≤–æ
      try {
        await cancelAllOrders(symbol);
      } catch (err) {
        console.warn(
          `‚ö†Ô∏è Failed to cancel existing orders before realign for ${symbol}:`,
          err?.message || err,
        );
      }

      // 7.1.a) –ü–µ—Ä–µ–æ–±—á–∏—Å–ª—é—î–º–æ STOP –∑ —Ç–∞–∫–∏–º —Å–∞–º–∏–º –∞–±—Å–æ–ª—é—Ç–Ω–∏–º –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è–º –≤—ñ–¥ entry
      try {
        if (Number.isFinite(pos.stopPrice)) {
          const absDelta = Math.abs(Number(entryPrice) - Number(pos.stopPrice));
          const newStop =
            side === 'LONG' ? avgEntry - absDelta : avgEntry + absDelta;

          if (validateStop(side, avgEntry, avgEntry, newStop)) {
            const stopPx = adjustPrice(filters, newStop);
            const slOrder = await placeStopLoss(symbol, side, stopPx, liveQty);
            orderIds.stop = slOrder?.orderId || orderIds.stop;
            await updateStopPrice(symbol, stopPx, 'OPEN_REALIGN');
            console.log(`üõë SL realigned @ ${stopPx} (absŒî=${absDelta})`);
          }
        }
      } catch (err) {
        console.warn(
          `‚ö†Ô∏è Failed to realign SL for ${symbol}:`,
          err?.message || err,
        );
      }

      // 7.1.b) –ü–µ—Ä–µ–æ–±—á–∏—Å–ª—é—î–º–æ TP-—Ü—ñ–Ω–∏, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –≤—ñ–¥—Å–æ—Ç–∫–∏ –≤—ñ–¥ –≤—Ö–æ–¥—É
      try {
        const totalQty = Number(liveQty);
        let allocated = 0;
        const tpPlan = [];

        for (let i = 0; i < pos.takeProfits.length; i++) {
          const { price: oldPrice, sizePct, pct } = pos.takeProfits[i];

          // –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—ñ–¥—Å–æ—Ç–∫–æ–≤—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é –≤—ñ–¥ —Å—Ç–∞—Ä–æ–≥–æ entry, —è–∫—â–æ pct –Ω–µ –Ω–∞–¥–∞–Ω–∏–π
          let distPct = Number(pct);
          if (!Number.isFinite(distPct)) {
            if (side === 'LONG')
              distPct = ((oldPrice - entryPrice) / entryPrice) * 100;
            else distPct = ((entryPrice - oldPrice) / entryPrice) * 100;
          }

          // –ù–æ–≤–∞ —Ü—ñ–Ω–∞ –≤—ñ–¥–Ω–æ—Å–Ω–æ avgEntry
          const targetPx =
            side === 'LONG'
              ? avgEntry * (1 + distPct / 100)
              : avgEntry * (1 - distPct / 100);

          // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è TP
          const targetRaw = (totalQty * Number(sizePct || 0)) / 100;
          let tpQty;
          if (i === pos.takeProfits.length - 1) {
            const remainderRaw = Math.max(totalQty - allocated, 0);
            tpQty = Number(adjustQuantity(filters, remainderRaw));
          } else {
            tpQty = Number(adjustQuantity(filters, targetRaw));
          }

          if (!Number.isFinite(tpQty) || tpQty <= 0) continue;
          if (allocated + tpQty > totalQty)
            tpQty = Math.max(totalQty - allocated, 0);
          if (tpQty <= 0) continue;

          const tpPx = adjustPrice(filters, targetPx);
          const tpOrder = await placeTakeProfit(symbol, side, tpPx, tpQty);
          if (tpOrder?.orderId) orderIds.takes.push(tpOrder.orderId);
          allocated += tpQty;
          tpPlan.push({ price: tpPx, sizePct });
          console.log(
            `üéØ TP(realigned)#${i + 1} @ ${tpPx} for qty=${tpQty} (${Number(sizePct).toFixed(2)}%)`,
          );
        }

        await updateTakeProfits(symbol, tpPlan, avgEntry, 'OPEN_REALIGN');

        const diff = totalQty - allocated;
        if (diff > 0) console.log(`‚ÑπÔ∏è Unallocated qty after realign: ${diff}`);
      } catch (err) {
        console.warn(
          `‚ö†Ô∏è Failed to realign TP grid for ${symbol}:`,
          err?.message || err,
        );
      }
    }
  } catch (err) {
    console.warn(`‚ö†Ô∏è Realign check failed for ${symbol}:`, err?.message || err);
  }

  return pos;
}
