// trading/executeTrade.js
import {
  openMarketOrder,
  placeStopLoss,
  placeTakeProfit,
  cancelAllOrders,
  getSymbolFilters,
  adjustQuantity,
  adjustPrice,
  getPosition,
  setLeverage,
} from './binance.js';

import { preparePosition } from '../core/prepare.js';

const TRADE_MODE = process.env.TRADE_MODE || 'paper';

function isValidStop(side, lastPrice, stopPrice) {
  return side === 'LONG' ? stopPrice < lastPrice : stopPrice > lastPrice;
}

export async function executeTrade(symbol, cfg, analysis, side, price) {
  // 0) –≥–æ—Ç—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –æ–ø–∏—Å (—Ç—ñ–ª—å–∫–∏ —â–æ–± –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ size/SL/TP)
  let pos = await preparePosition(symbol, cfg, analysis, side, price);
  const { size, entryPrice, takeProfits, stopPrice } = pos;
  const leverage = cfg?.strategy?.capital?.leverage || 10;

  // PAPER: –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–ø–∏—Å –¥–ª—è –ª–æ–≥—ñ–≤/—Ç–µ—Å—Ç—ñ–≤
  if (TRADE_MODE === 'paper') {
    console.log(
      `üü¢ [PAPER] Simulated ${side} ${symbol} @ ${entryPrice} (size=${size}$, lev=${leverage}x)`,
    );
    return pos;
  }

  // ---- LIVE MODE ----
  // 1) –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ –ø–ª–µ—á–µ –ü–ï–†–ï–î –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è–º
  try {
    await setLeverage(symbol, leverage);
    console.log(`‚öôÔ∏è Set leverage ${leverage}x for ${symbol}`);
    pos.leverage = leverage; // —Ñ—ñ–∫—Å—É—î–º–æ —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –æ–±'—î–∫—Ç—ñ (–¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è)
  } catch (err) {
    console.error(
      `‚ùå Failed to set leverage for ${symbol}:`,
      err?.message || err,
    );
  }

  // 2) –§—ñ–ª—å—Ç—Ä–∏ –±—ñ—Ä–∂—ñ
  let filters;
  try {
    filters = await getSymbolFilters(symbol);
  } catch (err) {
    console.error(
      `‚ùå Failed to fetch filters for ${symbol}:`,
      err?.message || err,
    );
    return null;
  }

  const rawQty = size / entryPrice;
  const qty = adjustQuantity(filters, rawQty);
  if (!qty || Number(qty) <= 0) {
    console.error(
      `‚ùå Quantity too small, skip trade ${symbol} (raw=${rawQty})`,
    );
    return null;
  }

  // 3) –°–∫–∞—Å—É—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ä—ñ –æ—Ä–¥–µ—Ä–∏ –¥–ª—è —Å–∏–º–≤–æ–ª—É (—â–æ–± –Ω–µ –ª–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏)
  try {
    await cancelAllOrders(symbol);
  } catch (err) {
    console.warn(
      `‚ö†Ô∏è Failed to cancel existing orders for ${symbol}:`,
      err?.message || err,
    );
  }

  // 4) –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–∞—Ä–∫–µ—Ç-—É–≥–æ–¥—É
  try {
    await openMarketOrder(symbol, side === 'LONG' ? 'BUY' : 'SELL', qty);
    console.log(`‚úÖ [LIVE] Opened ${side} ${symbol}, qty=${qty}`);
  } catch (err) {
    console.error(
      `‚ùå Failed to open market order for ${symbol}:`,
      err?.message || err,
    );
    return null;
  }

  // 5) –°—Ç–∞–≤–∏–º–æ SL
  if (stopPrice && isValidStop(side, entryPrice, stopPrice)) {
    try {
      const stopPx = adjustPrice(filters, stopPrice);
      await placeStopLoss(symbol, side, stopPx, qty);
      console.log(`üõë Stop-loss placed @ ${stopPx}`);
    } catch (err) {
      console.warn(`‚ö†Ô∏è Failed to place SL for ${symbol}:`, err?.message || err);
    }
  }

  // 6) –°—Ç–∞–≤–∏–º–æ TP(–∏)
  if (Array.isArray(takeProfits) && takeProfits.length) {
    for (const tp of takeProfits) {
      try {
        const tpQty = adjustQuantity(filters, (qty * tp.sizePct) / 100);
        if (Number(tpQty) <= 0) continue;

        const tpPx = adjustPrice(filters, tp.price);
        await placeTakeProfit(symbol, side, tpPx, tpQty);
        console.log(`üéØ Take-profit @ ${tpPx} (${tp.sizePct}%)`);
      } catch (err) {
        console.warn(
          `‚ö†Ô∏è Failed to place TP for ${symbol}:`,
          err?.message || err,
        );
      }
    }
  }

  // 7) –ü—ñ–¥—Ç—è–≥–Ω–µ–º–æ —Ñ–∞–∫—Ç —ñ–∑ Binance (–¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Ü–∏—Ñ—Ä)
  try {
    const live = await getPosition(symbol);
    if (live && Number(live.positionAmt) !== 0) {
      const avgEntry = Number(live.entryPrice);
      pos = {
        ...pos,
        entryPrice: avgEntry,
        size: Math.abs(Number(live.positionAmt)) * avgEntry, // $-–Ω–æ—Ç—ñ–æ–Ω–∞–ª —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        updates: [
          ...(pos.updates || []),
          {
            time: new Date().toISOString(),
            action: 'OPEN_CONFIRMED',
            price: avgEntry,
          },
        ],
      };
    }
  } catch (err) {
    console.warn(
      `‚ö†Ô∏è Failed to read live position for ${symbol}:`,
      err?.message || err,
    );
  }

  // 8) –ù–Ü–ß–û–ì–û –ù–ï –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –õ–û–ö–ê–õ–¨–ù–û ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω
  return pos;
}
