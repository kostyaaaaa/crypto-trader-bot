// trading/binance/ws-listener.js
import axios from 'axios';
import WebSocket from 'ws';
import { notifyTrade } from '../../utils/notify.js';
import {
  closePositionHistory,
  getOpenPosition,
  updateStopPrice,
  updateTakeProfits,
} from '../core/historyStore.js';
import { cancelAllOrders, getPosition, openMarketOrder } from './binance.js';

// -------------------------
// 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è listenKey
// -------------------------
async function getListenKey() {
  try {
    const res = await axios.post(
      'https://fapi.binance.com/fapi/v1/listenKey',
      {},
      { headers: { 'X-MBX-APIKEY': process.env.BINANCE_API_KEY } },
    );
    return res.data.listenKey;
  } catch (err) {
    console.error('‚ùå Failed to get listenKey:', err.message);
    return null;
  }
}

// -------------------------
// 2. –ó–∞–ø—É—Å–∫ WS —Å—Ç—Ä—ñ–º—É
// -------------------------
export async function startUserStream() {
  const listenKey = await getListenKey();
  if (!listenKey) return;

  const wsUrl = `wss://fstream.binance.com/ws/${listenKey}`;
  const ws = new WebSocket(wsUrl);

  ws.on('open', () => {
    console.log('üîå Binance user stream connected');
  });

  ws.on('message', async (raw) => {
    try {
      const msg = JSON.parse(raw.toString());
      await handleEvent(msg);
    } catch (err) {
      console.error('‚ùå Failed to parse WS message:', err);
    }
  });

  ws.on('close', () => {
    console.log('‚ö†Ô∏è Binance user stream closed. Reconnecting...');
    setTimeout(() => startUserStream(), 5000);
  });

  ws.on('error', (err) => {
    console.error('‚ùå WS error:', err.message);
    ws.close();
  });

  // –æ–Ω–æ–≤–ª–µ–Ω–Ω—è listenKey —Ä–∞–∑ –Ω–∞ 25 —Ö–≤
  setInterval(
    async () => {
      try {
        await axios.put(
          'https://fapi.binance.com/fapi/v1/listenKey',
          {},
          { headers: { 'X-MBX-APIKEY': process.env.BINANCE_API_KEY } },
        );
        console.log('‚ôªÔ∏è listenKey refreshed');
      } catch (err) {
        console.error('‚ùå Failed to refresh listenKey:', err.message);
      }
    },
    25 * 60 * 1000,
  );
}

// -------------------------
// 3. –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è —Ö–≤–æ—Å—Ç—ñ–≤
// -------------------------
async function forceCloseIfLeftover(symbol) {
  try {
    const live = await getPosition(symbol);
    if (!live) return;

    const amt = Number(live.positionAmt);
    if (amt === 0) return;

    const side = amt > 0 ? 'SELL' : 'BUY';
    await openMarketOrder(symbol, side, Math.abs(amt));
    console.log(`üîß Forced close leftover ${amt} on ${symbol}`);
  } catch (err) {
    console.error(`‚ùå Failed to force close leftover ${symbol}:`, err.message);
  }
}

// -------------------------
// 4. –û–±—Ä–æ–±–∫–∞ —ñ–≤–µ–Ω—Ç—ñ–≤
// -------------------------
async function handleEvent(msg) {
  switch (msg.e) {
    case 'ACCOUNT_UPDATE':
      // üîπ –¢—É—Ç –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –ø–æ–¥—ñ—ó –∞–∫–∞—É–Ω—Ç–∞ (–±–∞–ª–∞–Ω—Å, –º–∞—Ä–∂–∞, –∑–º—ñ–Ω–∏ —É wallet).
      // –ó–∞—Ä–∞–∑ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ, –∞–ª–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É.
      break;

    case 'ORDER_TRADE_UPDATE': {
      // üîπ –¶–µ –æ—Å–Ω–æ–≤–Ω–∏–π —ñ–≤–µ–Ω—Ç –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä—ñ–≤ (Binance Futures).
      // –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏:
      //   - –æ—Ä–¥–µ—Ä —á–∞—Å—Ç–∫–æ–≤–æ –∞–±–æ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–∫–æ–Ω–∞–Ω–∏–π,
      //   - —Å–ø—Ä–∞—Ü—é–≤–∞–≤ SL / TP,
      //   - –æ—Ä–¥–µ—Ä –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ —Ç–æ—â–æ.

      const o = msg.o;
      const symbol = o.s; // —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "BTCUSDT")
      const status = o.X; // —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ (NEW, PARTIALLY_FILLED, FILLED, CANCELED...)
      const side = o.S; // BUY / SELL
      const type = o.ot; // —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (MARKET, STOP_MARKET, TAKE_PROFIT_MARKET)
      const lastPx = Number(o.L); // —Ü—ñ–Ω–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —É–≥–æ–¥–∏ –≤ —Ä–∞–º–∫–∞—Ö —Ü—å–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
      const lastQty = Number(o.l); // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —É–≥–æ–¥–∏
      console.log(
        `üì¶ Order update: ${symbol} ${side} status=${status}, type=${type}, lastPx=${lastPx}, lastQty=${lastQty}, orderId=${o.i}`,
      );

      if (status !== 'FILLED') {
        // üîπ –ù–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å —Ç—ñ–ª—å–∫–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–∫–æ–Ω–∞–Ω—ñ –æ—Ä–¥–µ—Ä–∏.
        // –Ø–∫—â–æ –æ—Ä–¥–µ—Ä —â–µ –Ω–µ FILLED ‚Üí –≤–∏—Ö–æ–¥–∏–º–æ.
        break;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —É –Ω–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è –ø–æ —Ü—å–æ–º—É —Å–∏–º–≤–æ–ª—É –≤ –ë–î
      const pos = await getOpenPosition(symbol);

      // =======================
      // üõë –í–∏–ø–∞–¥–æ–∫: –∑–∞–∫—Ä–∏–≤–∞—é—á–∏–π –æ—Ä–¥–µ—Ä (SL/TP), –∞–ª–µ –≤ –ë–î –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
      // =======================
      if (!pos && (type === 'STOP_MARKET' || type === 'TAKE_PROFIT_MARKET')) {
        console.warn(
          `‚ö†Ô∏è ${symbol}: FILLED ${type} but no OPEN position in DB. Forcing close.`,
        );
        const closed = await closePositionHistory(symbol, {
          closedBy: type === 'STOP_MARKET' ? 'SL' : 'TP', // –º–∞—Ä–∫—É—î–º–æ —á–∏–º –∑–∞–∫—Ä–∏–ª–æ—Å—å
        });
        await cancelAllOrders(symbol); // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ –æ—Ä–¥–µ—Ä–∏
        await forceCloseIfLeftover(symbol); // –ø—ñ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: —è–∫—â–æ —â–æ—Å—å –∑–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞ –±—ñ—Ä–∂—ñ
        if (closed) notifyTrade(closed, 'CLOSED'); // –ø—É—à–∏–º–æ –≤ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        return;
      }

      // =======================
      // üõë Stop-loss (STOP_MARKET)
      // =======================
      if (type === 'STOP_MARKET') {
        console.log(`üõë ${symbol}: Stop-loss triggered`);
        if (pos) {
          // –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É SL —è–∫ "–≤–∏–∫–æ–Ω–∞–Ω—É"
          await updateStopPrice(symbol, lastPx, 'FILLED');

          // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
          const closed = await closePositionHistory(symbol, {
            closedBy: 'SL',
          });

          // –ß–∏—Å—Ç–∏–º–æ –∑–∞–ª–∏—à–∫–∏
          await cancelAllOrders(symbol);
          await forceCloseIfLeftover(symbol);

          // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
          if (closed) notifyTrade(closed, 'CLOSED');
        }
      }

      // =======================
      // üéØ Take-profit (TAKE_PROFIT_MARKET)
      // =======================
      else if (type === 'TAKE_PROFIT_MARKET') {
        console.log(`üéØ ${symbol}: Take-profit triggered`);
        if (pos && Array.isArray(pos.takeProfits)) {
          // –ë–µ—Ä–µ–º–æ –∫–æ–ø—ñ—é –ø–æ—Ç–æ—á–Ω–∏—Ö —Ç–µ–π–∫—ñ–≤
          const updatedTps = pos.takeProfits.map((tp) => ({ ...tp }));

          // –®—É–∫–∞—î–º–æ —Ç–µ–π–∫, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ü—ñ–Ω—ñ (–∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –ø–æ—Ö–∏–±–∫–æ—é)
          const tolerance = Math.max(0.01, Math.abs(pos.entryPrice * 0.001)); // 0.1% –∞–±–æ –º—ñ–Ω. 0.01
          let found = false;
          for (let tp of updatedTps) {
            if (
              !tp.filled &&
              Math.abs(Number(tp.price) - lastPx) <= tolerance
            ) {
              tp.filled = true; // –ø–æ–∑–Ω–∞—á–∞—î–º–æ —Ü–µ–π TP —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–π
              found = true;
              break;
            }
          }

          // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–π–∫—ñ–≤ —É –ë–î
          await updateTakeProfits(
            symbol,
            updatedTps,
            pos.entryPrice,
            'TP_FILLED',
          );

          // –Ø–∫—â–æ –í–°–Ü —Ç–µ–π–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ ‚Üí –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
          const allFilled = updatedTps.every((tp) => tp.filled);
          if (allFilled) {
            const closed = await closePositionHistory(symbol, {
              closedBy: 'TP',
            });
            await cancelAllOrders(symbol);
            await forceCloseIfLeftover(symbol);
            if (closed) notifyTrade(closed, 'CLOSED');
          }
          // –Ü–Ω–∞–∫—à–µ –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥–∫—Ä–∏—Ç–æ—é (—á–∞—Å—Ç–∫–æ–≤–∏–π TP)
        }
      }

      // =======================
      // ‚úÖ MARKET (–∑–≤–∏—á–∞–π–Ω–∏–π –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä, –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è)
      // =======================
      else if (type === 'MARKET') {
        console.log(`‚úÖ Market order filled for ${symbol} (${side})`);
        // –¢—É—Ç –º–æ–∂–Ω–∞ –æ–±—Ä–æ–±–∏—Ç–∏ –ª–æ–≥—ñ–∫—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –∞–±–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—Ä—É—á–Ω—É
      }
    }

    default:
    // üîπ –Ø–∫—â–æ –ø—Ä–∏–π—à–æ–≤ —ñ–Ω—à–∏–π —ñ–≤–µ–Ω—Ç, –º–∏ –π–æ–≥–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ.
  }
}
