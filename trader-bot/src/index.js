// import { CoinConfigModel } from 'crypto-trader-db';
// import connectDB from './config/database.js';
// // import dns from 'dns';
// // dns.setDefaultResultOrder('ipv4first');
// import { OrderBookStepWS } from './analize-modules/orderbook/order-book-step.js';
// import { LiquidationsStepWS } from './analize-modules/liquidations/liquidations-step.js';
// import { finalAnalyzer } from './utils/final-analyzer.js';
// import { tradingEngine } from './trading/core/engine.js';
// import { monitorPositions } from './trading/core/monitor.js';
// import { startUserStream } from './trading/binance/binance-ws-listener.js';
// const activeIntervals = {};
// startUserStream();
// async function startConfig(config) {
//   const { symbol, isActive, analysisConfig, strategy } = config;
//   if (!isActive) return;

//   const stopOB = OrderBookStepWS(symbol);
//   const stopLiq = LiquidationsStepWS(symbol);

//   // üîπ –§—ñ–Ω–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ + –∑–∞–ø—É—Å–∫ –¥–≤–∏–≥—É–Ω–∞ —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É
//   const analysisInterval = setInterval(async () => {
//     await finalAnalyzer({ symbol, analysisConfig });
//     await tradingEngine(symbol, { analysisConfig, strategy });
//   }, 60 * 1000);

//   // üîπ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —Ä–∞–∑ –Ω–∞ 15 —Å–µ–∫—É–Ω–¥
//   const monitorInterval = setInterval(async () => {
//     await monitorPositions({ symbol, strategy });
//   }, 15 * 1000);

//   // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ–± –º–∞—Ç–∏ –∑–º–æ–≥—É —á–∏—Å—Ç–∏—Ç–∏ –ø—Ä–∏ –∞–ø–¥–µ–π—Ç—ñ/–≤–∏–¥–∞–ª–µ–Ω–Ω—ñ
//   activeIntervals[symbol] = {
//     analysisInterval,
//     monitorInterval,
//     stopOB,
//     stopLiq,
//   };
// }

// function stopConfig(symbol) {
//   const svc = activeIntervals[symbol];
//   if (!svc) return;
//   clearInterval(svc.analysisInterval);
//   clearInterval(svc.monitorInterval);
//   if (svc.stopOB) svc.stopOB();
//   if (svc.stopLiq) svc.stopLiq();
//   delete activeIntervals[symbol];
//   console.log(`üõë Stopped services for ${symbol}`);
// }

// export async function subscribeCoinConfigs() {
//   // 1Ô∏è‚É£ –ü—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ ‚Äî –≤–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥–∏ –∑ –ë–î
//   const allConfigs = await CoinConfigModel.find({});
//   console.log(
//     'üì¶ Initial configs:',
//     allConfigs.map((c) => c.symbol),
//   );

//   for (const cfg of allConfigs) {
//     await startConfig(cfg);
//   }

//   // 2Ô∏è‚É£ –°–ª—É—Ö–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—ñ–≤ —É –ë–î
//   const changeStream = CoinConfigModel.watch([], {
//     fullDocument: 'updateLookup',
//   });

//   changeStream.on('change', async (change) => {
//     if (change.operationType === 'insert') {
//       const newConfig = change.fullDocument;
//       await startConfig(newConfig);
//     }

//     if (change.operationType === 'update') {
//       const updatedConfig = change.fullDocument;
//       stopConfig(updatedConfig.symbol); // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ä–µ
//       await startConfig(updatedConfig); // –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–Ω–æ–≤–æ
//     }

//     if (change.operationType === 'delete') {
//       const symbol = change.documentKey._id; // —Ç—Ä–µ–±–∞ –±—É–¥–µ –∑–≤'—è–∑–∞—Ç–∏ id ‚Üí symbol
//       stopConfig(symbol);
//     }
//   });

//   changeStream.on('error', (err) => {
//     console.error('‚ùå Change stream error:', err);
//   });
// }
// connectDB();
// subscribeCoinConfigs();
