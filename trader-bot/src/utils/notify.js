// trading/utils/notify.js
import TelegramBot from "node-telegram-bot-api";

// 1. –ë–µ—Ä–∏ —Ç–æ–∫–µ–Ω —ñ chatId –∑ .env
const bot = new TelegramBot(process.env.TG_TOKEN, { polling: false });
const chatId = process.env.TG_CHAT_ID;

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–µ–π–¥
 * @param {Object} position - –æ–±'—î–∫—Ç —É–≥–æ–¥–∏
 * @param {string} action - "OPENED" | "CLOSED" | "UPDATED"
 */
export function notifyTrade(position, action) {
	if (!chatId || !process.env.TG_TOKEN) {
		console.warn("‚ö†Ô∏è Telegram notify skipped: TG_TOKEN or TG_CHAT_ID missing");
		return;
	}

	const tpList =
		position.takeProfits && position.takeProfits.length > 0
			? position.takeProfits.map((tp, i) => `TP${i + 1}: ${tp.price} (${tp.sizePct}%)`).join("\n")
			: "‚Äî";

	let title = `${action} ${position.symbol}`;
	if (action === "CLOSED" && position.exitReason) {
		title += ` (${position.exitReason})`; // üëà –ø–æ–∫–∞–∂–µ TP –∞–±–æ SL
	}

	const msg = `
üìä <b>${title}</b>
Side: <b>${position.side}</b>
Entry: ${position.entryPrice}
Size: $${position.size} (Leverage ${position.leverage}x)
SL: ${position.stopPrice || "‚Äî"}
TPs:
${tpList}
RRR: ${position.rrrToFirstTp || "‚Äî"}
  `.trim();

	bot.sendMessage(chatId, msg, { parse_mode: "HTML" });
}

/**
 * –ü—Ä–æ—Å—Ç–∞ —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∞–ª–µ—Ä—Ç—ñ–≤
 */
export function notifyAlert(message) {
	if (!chatId || !process.env.TG_TOKEN) return;
	bot.sendMessage(chatId, `‚ö†Ô∏è ALERT: ${message}`);
}